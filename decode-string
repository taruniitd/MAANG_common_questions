//https://www.geeksforgeeks.org/decode-string-recursively-encoded-count-followed-substring/
#include <iostream>
#include <stack>
using namespace std;

string decodeStr(string str)
{
    stack<int> IntegerStack;
    stack<char> charStack;
    
    string temp = "", result = "";
    
    for(int i = 0; i < str.length(); i++)
    {
        int count = 0;
        if(str[i] >= '0' && str[i] <= '9')
        {
            int count = 0;
            while(str[i] >= '0' && str[i] <= '9')
            {
                count = count * 10 + str[i] - '0';
                i++;
            }
            i--;
            IntegerStack.push(count);
        }
        else if (str[i] == ']')
        {
            temp = "";
            count = 0;
            if(!IntegerStack.empty())
            {
                count = IntegerStack.top();
                IntegerStack.pop();
            }
            while(!charStack.empty() && charStack.top() != '[')
            {
                temp = charStack.top() + temp;
                charStack.pop();
            }
            if(!charStack.empty() && charStack.top() == '[')
                charStack.pop();
            for(int j = 0; j < count; j++)
                result = result + temp;
            for(int j = 0; j < result.length(); j++)
                charStack.push(result[j]);
            result = "";
        }
        else if(str[i] == '[')
        {
            if(str[i - 1] >= '0' && str[i - 1] <= '9')
                charStack.push(str[i]);
            else
            {
                charStack.push(str[i]);
                IntegerStack.push(1);
            }
        }
        else
            charStack.push(str[i]);
        
    }
    while(!charStack.empty())
    {
        result = charStack.top() + result;
        charStack.pop();
    }
    return result;
}

string decodeStrUsingSingleStack(string str)
{
    stack<char> charStack;
    
    for(int i = 0; i < str.length(); i++)
    {
        if(str[i] == ']')
        {
            string temp;
            while(!charStack.empty() && charStack.top() != '[')
            {
                temp = charStack.top() + temp;
                charStack.pop();
            }
            charStack.pop();
            string num_str;
            while(!charStack.empty() && isdigit(charStack.top()))
            {
                num_str = charStack.top() + num_str;
                charStack.pop();
            }
            int number = stoi(num_str);
            string repeat_str;
            for(int i = 0; i < number; i++)
                repeat_str += temp;
            for(char c : repeat_str)
                charStack.push(c);
        }
        else
        {
            charStack.push(str[i]);
        }
    }
    string res;
    while(!charStack.empty())
    {
        res = charStack.top() + res;
        charStack.pop();
    }
    return res;
}

int main()
{
    string str = "3[b2[ca]]";
    cout << decodeStr(str) << endl;
    cout << decodeStrUsingSingleStack(str) << endl;
    return 0;
}
