//https://www.geeksforgeeks.org/print-a-given-matrix-in-spiral-form/
#include <iostream>
#include <vector>
using namespace std;
#define R 4
#define C 4
vector<int> sprialMatrix(vector<vector<int>>& matrix)
{
    int m = matrix.size();
    int n = matrix[0].size();
    vector<int> ans;
    
    if(m == 0)
        return ans;
    
    vector<vector<bool>> isVisited(m, vector<bool>(n, false));
    int dir_r[] = {0, 1, 0, -1};
    int dir_c[] = {1, 0, -1, 0};
    
    int x = 0, y = 0, di = 0;
    
    for(int i = 0; i < m*n; i++)
    {
        ans.push_back(matrix[x][y]);
        isVisited[x][y] = true;
        
        int newX = x + dir_r[di];
        int newY = y + dir_c[di];
        
        if(0 <= newX && newX < m && 0 <= newY && newY < n && !(isVisited[newX][newY]))
        {
            x = newX;
            y = newY;
        }
        else
        {
            di = (di + 1) % 4;
            x = x + dir_r[di];
            y = y + dir_c[di];
        }
    }
    return ans;
}

void printSpiralMatrix(vector<int> ansMatrix)
{
    cout << "print matrix in spiral " << endl;
    for(int x : ansMatrix)
        cout << x <<"  ";
}

void sprialMatrixUsingIndex(vector<vector<int>> matrix, int numRow, int numCol)
{
    int i, rowIndex = 0, colIndex = 0;
    
    while(rowIndex < numRow && colIndex < numCol)
    {
        for(i = 0; i < numCol; i++)
        {
            cout << matrix[rowIndex][i] <<"  "; 
        }
        rowIndex++;
        for(i = rowIndex; i < numRow; i++)
        {
            cout << matrix[i][numCol - 1] << "  ";
        }
        numCol--;
        if(rowIndex < numRow)
        {
            for(i = numCol - 1; i >= 1; i--)
            {
                cout << matrix[numRow - 1][i] << "  ";
            }
            numRow--;
        }
        if(colIndex < numCol)
        {
            for(i = numRow - 1; i >= 1; i--)
            {
                cout << matrix[i][colIndex] << "  ";
            }
            colIndex++;
        }
        
    }
    return;
}

void sprialMatrixUsingRecursion(int matrix[][C], int rowIndex, int colIndex, int numRow, int numCol)
{
    if(rowIndex >= numRow || colIndex >= numCol)
        return;
    for(int p = colIndex; p < numCol; p++)
        cout << matrix[rowIndex][p] << "  ";
    for(int p = rowIndex + 1; p < numRow; p++)
        cout << matrix[p][numCol - 1] << "  ";
    if((numRow - 1) != rowIndex)
    {
        for(int p = numCol - 2; p >= colIndex; p--)
            cout << matrix[numRow - 1][p] << "  ";
    }
    if((numCol - 1) != colIndex)
    {
        for(int p = numRow - 2; p > rowIndex; p--)
            cout << matrix[p][colIndex] << "  ";
    }
    sprialMatrixUsingRecursion(matrix, rowIndex + 1, colIndex + 1, numRow - 1, numCol - 1);
}

bool isInBound(int rowIndex, int colIndex)
{
    if(rowIndex < 0 || rowIndex >= R || colIndex < 0 || colIndex >= C)
        return false;
    return true;
}

bool isBlocked(int matrix[R][C], int rowIndex, int colIndex)
{
    if(!isInBound(rowIndex,colIndex))
        return true;
    if(matrix[rowIndex][colIndex] == -1)
        return true;

    return false;
}

void sprialMatrixUsingDFS(int matrix[R][C], int rowIndex, int colIndex, int dir, vector<int>& res)
{
    if(isBlocked(matrix, rowIndex, colIndex))
        return;
    bool allBlocked = true;
    for(int k = -1; k <= 1; k += 2)
        allBlocked = allBlocked && isBlocked(matrix, k + rowIndex, colIndex) && isBlocked(matrix, rowIndex, k + colIndex);
    //cout << " push in result matrix " << matrix[rowIndex][colIndex] << endl;
    res.push_back(matrix[rowIndex][colIndex]);
    matrix[rowIndex][colIndex] = -1;
    if(allBlocked)
        return;
    
    int nxt_i = rowIndex;
    int nxt_j = colIndex;
    int nxt_dir = dir;
    
    if(dir == 0)
    {
        if(!isBlocked(matrix, rowIndex, colIndex + 1))
        {
            //cout << "Now to 1st dir: nxt_i = " << nxt_i << "nxt_j = " << nxt_j << endl;
            nxt_j++;
        }
        else
        {
            //cout << "changing to 2nd dir : nxt_i = " << nxt_i << "nxt_j = " << nxt_j << endl;
            nxt_dir = 1;
            nxt_i++;
            //nxt_j--;
        }
    }
    else if (dir == 1)
    {
        if(!isBlocked(matrix, rowIndex + 1, colIndex))
        {
            //cout << "Now to 2nd dir" << endl;
            nxt_i++;
        }
        else
        {
            //cout << "changing to 3rd dir" << endl;
            nxt_dir = 2;
            nxt_j--;
        }
    }
    else if(dir == 2)
    {
        if(!isBlocked(matrix, rowIndex, colIndex - 1))
            nxt_j--;
        else
        {
            nxt_dir = 3;
            nxt_i--;
        }
    }
    else if(dir == 3)
    {
        if(!isBlocked(matrix, rowIndex - 1, colIndex))
            nxt_i--;
        else
        {
            nxt_dir = 0;
            nxt_j++;
        }
    }
    sprialMatrixUsingDFS(matrix, nxt_i, nxt_j, nxt_dir, res);
}

int main()
{
    vector<vector<int>> matrix = { {1, 2, 3, 4},
                                    {5, 6, 7, 8},
                                    {9, 10, 11, 12},
                                    {13, 14, 15, 16} };
    
    vector<vector<int>> matrix1 = { {1, 2, 3, 4},
                                    {5, 6, 7, 8},
                                    {9, 10, 11, 12},
                                    {13, 14, 15, 16} };
    
    int matrix2[R][C] =             { {1, 2, 3, 4},
                                    {5, 6, 7, 8},
                                    {9, 10, 11, 12},
                                    {13, 14, 15, 16} };                                 
    
    int matrix3[R][C] =         { {1, 2, 3, 4},
                                    {5, 6, 7, 8},
                                    {9, 10, 11, 12},
                                    {13, 14, 15, 16} }; 
    vector<int> res;
    int tryCase = 0;
	cin >> tryCase;
    switch(tryCase)
    {
        case 0:
            cout << "sprialMatrix using directions : "<< endl;
            res = sprialMatrix(matrix);
            printSpiralMatrix(res);
            break;
        case 1:
            cout << "sprialMatrix using indexes : "<< endl;
            sprialMatrixUsingIndex(matrix1, R, C);
            break;
        case 2:
            cout << "sprialMatrix using recursion : "<< endl;
            sprialMatrixUsingRecursion(matrix2, 0, 0, R, C);
            break;
        case 3:
            cout << "sprialMatrix using DFS : "<< endl;
            sprialMatrixUsingDFS(matrix3, 0, 0, 0, res);
            printSpiralMatrix(res);
            break;
    }
    return 0;
}
