//https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/
//https://www.geeksforgeeks.org/longest-increasing-subsequence-dp-3/#:~:text=The%20Longest%20Increasing%20Subsequence%20(LIS)%20problem%20is%20to%20find%20the,50%2C%2060%2C%2080%7D.
#include <iostream>
#include <vector>
#include <set>
#include <climits>
#include <algorithm>
using namespace std;
int CeilIndex(vector<int> &tmp_vec, int left, int right, int cur_key)
{
    while(right - left > 1)
    {
        int m = left + (right - left) / 2;
        if(tmp_vec[m] >= cur_key)
            right = m;
        else
            left = m;
    }
    return right;
}


int LongIncrSubSeq(vector<int> &cur_vec)
{
    if(cur_vec.size() == 0)
        return 0;
    vector<int> temp(cur_vec.size(), 0);
    
    int length = 1;
    temp[0] = cur_vec[0];
    
    for(size_t i = 1; i < cur_vec.size(); i++)
    {
        if(cur_vec[i] < temp[0])
            temp[0] = cur_vec[i];
        else if(cur_vec[i] > temp[length - 1])
            temp[length++] = cur_vec[i];
        else
            temp[CeilIndex(temp, -1, length - 1, cur_vec[i])] = cur_vec[i];
    }
    return length;
}

int LongIncrSubSeqUsingInBuiltSearch(vector<int> &cur_vec)
{
    if(cur_vec.size() == 0)
        return 0;
    vector<int> temp(cur_vec.size(), 0);
    int length = 1;
    
    temp[0] = cur_vec[0];
    
    for(int i = 0; i < cur_vec.size(); i++)
    {
        auto b = temp.begin(), e = temp.begin() + length;
        auto it = lower_bound(b, e, cur_vec[i]);
        
        if(it == temp.begin() + length)
            temp[length++] = cur_vec[i];
        else    
            *it = cur_vec[i];
    }
    return length;
}

int _lis(vector<int> &cur_vec, int n, int* max)
{
    if(n == 1)
        return 1;
    int res, max_ending_here = 1;

    for(int i = 0; i < n; i++)
    {
        res = _lis(cur_vec, i, max);
        if(cur_vec[i - 1] < cur_vec[n - 1] && res + 1 > max_ending_here)
            max_ending_here = res + 1;
    }
    if(*max < max_ending_here)
        *max = max_ending_here;
    return max_ending_here;
}

int LongIncrSubSeqOptimalStructure(vector<int> &cur_vec, int n)
{
    int max = 1;
    _lis(cur_vec, n, &max);
    return max;
}

int LongIncrSubSeqDP(vector<int> &cur_vec, int n)
{
    int lis[n];
    
    lis[0] = 1;
    
    for(int i = 0; i < n; i++)
    {
        lis[i] = 1;
        for(int j = 0; j < i; j++)
        {
            if(cur_vec[i] > cur_vec[j] && lis[i] < lis[j] + 1)
                lis[i] = lis[j] + 1;
        }
    }
    return *max_element(lis, lis + n);
}

int LongIncrSubSeqDP_1(vector<int> &cur_vec, int n)
{
    vector<int> b;
    set<int> s;
    
    set<int>::iterator it;
    
    for(int i = 0; i < n; i++)
    {
        s.insert(cur_vec[i]);
    }
    
    for(it = s.begin(); it != s.end(); it++)
        b.push_back(*it);
    int m = b.size(), i , j;
    int dp[m+1][n+1];
    
    for(i = 0; i < m + 1; i++)
        for(j = 0; j < n + 1; j++)
            dp[i][j] = -1;
    for(i = 0; i < m + 1; i++)
    {
        for(j = 0; j < n + 1; j++)
        {
            if(i == 0 || j == 0)
            {
                dp[i][j] = 0;
            }
            else if(cur_vec[j -1] == b[i - 1])
            {
                dp[i][j] = 1 + dp[i - 1][j - 1];
            }
            else
            {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    return dp[m][n];
}

int f(int idx, int prev_idx, int n, vector<int> & cur_vec, vector<vector<int>> &dp)
{
    if(idx == n)
        return 0;
    if(dp[idx][prev_idx + 1] != -1)
        return dp[idx][prev_idx + 1];
    int notTake = 0 + f(idx + 1, prev_idx, n, cur_vec, dp);
    int take = INT_MIN;
    if(prev_idx == -1 || cur_vec[idx] > cur_vec[prev_idx])
        take = 1 + f(idx + 1, idx, n, cur_vec, dp);
    return dp[idx][prev_idx + 1] = max(take, notTake);
}

int LongIncrSubSeqDP_2(vector<int> & cur_vec, int n)
{
    vector<vector<int>> dp(n + 1, vector<int>(n+1, -1)) ;
    return f(0, -1, n, cur_vec, dp);
}

int main()
{
    vector<int> cur_vec{2, 5, 3, 7, 11, 8, 10, 13, 6 };
    cout << "length of longest subsequence = " << LongIncrSubSeq(cur_vec);
    cout << endl;
    cout << "Use New Method 2: "; 
    vector<int> cur_vec_1{2, 5, 3, 7, 11, 8, 10, 13, 6 };
    cout << "length of longest subsequence = " << LongIncrSubSeqUsingInBuiltSearch(cur_vec_1);
    cout << endl;
    cout << "Use New Method 3: "; 
    vector<int> cur_vec_2{2, 5, 3, 7, 11, 8, 10, 13, 6 };
    cout << "length of longest subsequence = " << LongIncrSubSeqOptimalStructure(cur_vec_2, cur_vec_2.size());
    cout << endl;
    cout << "Use New Method 4: "; 
    vector<int> cur_vec_3{2, 5, 3, 7, 11, 8, 10, 13, 6 };
    cout << "length of longest subsequence = " << LongIncrSubSeqDP(cur_vec_3, cur_vec_3.size());
    cout << endl;
    cout << "Use New Method 5: "; 
    vector<int> cur_vec_4{2, 5, 3, 7, 11, 8, 10, 13, 6 };
    cout << "length of longest subsequence = " << LongIncrSubSeqDP_1(cur_vec_4, cur_vec_4.size());
    cout << endl;
    cout << "Use New Method 6: "; 
    vector<int> cur_vec_5{2, 5, 3, 7, 11, 8, 10, 13, 6 };
    cout << "length of longest subsequence = " << LongIncrSubSeqDP_2(cur_vec_5, cur_vec_5.size());
    return 0;
}
