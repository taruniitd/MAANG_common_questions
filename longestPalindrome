//https://www.youtube.com/watch?v=UflHuQj6MVA
//https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/
//https://www.geeksforgeeks.org/longest-palindromic-substring-set-2/
#include <iostream>
#include <string.h>
#include <unordered_map>
using namespace std;

void printPalindromeString(string str, int start, int last)
{
    cout << "str = " <<"  ";
    for(int i = start; i <= last; i++)
        cout << str[i];
    cout << endl;
}

void findLongestPalindromeStrUsingDP(string str, int n)
{
    bool table[n][n];
    memset(table, 0, sizeof(table));
    int start = 0;
    int maxlength = 1;
    
    for(int i = 0; i < n; i++)
        table[i][i] = 1;
        
    for(int i = 0; i < n - 2; i++)
    {
        if(str[i] == str[i+1])
        {
            table[i][i+1] = 1;
            start = i;
            maxlength = 2;
        }
    }
    for(int k = 3; k < n-1; k++)
    {
        for(int i = 0; i < n - k + 1; i++)
        {
            int j = i + k -1;
            if((table[i+1][j-1] == 1) && (str[i] == str[j]))
            {
                table[i][j] = 1;
                
                if(k > maxlength)
                {
                    start = i;
                    maxlength = k;
                }
            }    
        }
    }
    cout << " current palindrome length : " << maxlength << endl;
    printPalindromeString(str, start, start + maxlength - 1);
    return;// maxlength;
}

void findLongestPalindromeStrBrute(string str, int n)
{
    int maxlength = 1, start = 0;
    int flag = 1;
    for(int i = 0; i < n -1; i++)
    {
        for(int j = i; j < n -1; j++)
        {
            flag = 1;
            for(int k = 0; k < ((j - i + 1) / 2); k++)
            {
                if(str[i+k] != str[j - k])
                {
                    flag = 0;
                }
            }    
            if(flag && (j - i) > maxlength)
            {
                start = i;
                maxlength = j -i + 1;
            }
        }
    }
    printPalindromeString(str, start, start + maxlength -1);
    cout << "current palindrome length using DP : " << maxlength << endl;
    return;// maxlength;
}

void longestPalindrome(string str, int start, int end, string& outPalinStr, int& outPalinStrLen)
{
    bool flag = true;
    int st = start, en = end;
    //cout << "start = " << start << "end = " << end << endl;
    while(start <= end)
    {
        if(str[start++] != str[end--])
        {
            flag = false;
        }
    }
    
    if(flag)
    {
        //cout << "update new str length start : " << st << "  " << "end = " << en << endl;
        string temp = str.substr(st,en - st + 1);
        if(outPalinStrLen < temp.size())
        {
            outPalinStr = temp;
            outPalinStrLen = outPalinStr.size();
        }
    }
}

void findLongestPalindromeStrUsingMap(string str, int n)
{
    unordered_map<char,int> charMap;
    int outPalinStrLen = 1;
    string outPalinStr;
    
    for(int i = 0; i < n; i++)
    {
        charMap[str[i]] = i; 
    }
    
    for(int i = 0; i < n; i++)
    {
        longestPalindrome(str, i, charMap[str[i]], outPalinStr, outPalinStrLen);
    }
    cout << "current palindrome str = " << outPalinStr <<" using map  and length : " << outPalinStrLen << endl;
}

void findLongestPalindromeStrUsingOneExtraSpace(string str, int n)
{
    int low = 0, high = 0, start = 0, maxlength = 1;
    for(int i = 0; i < n; i++)
    {
        low = i - 1;
        high = i + 1;
        
        while((high < n) && str[high] == str[i])
            high++;
        
        while((low >= 0) && str[low] == str[i])
            low--;
        
        while((low >= 0) && (high < n) && str[high] == str[low])
        {
            high++;
            low--;
        }
        
        int length = high - low - 1;
        if(length > maxlength)
        {
            maxlength = length;
            start = low + 1;
        }
    }
    printPalindromeString(str, start, start + maxlength -1);
    cout << "current palindrome length using one extra space : " << maxlength << endl;
    return;
}
int main() {
	string str = "forgeeksskeegfor";
	int len = str.length();
	findLongestPalindromeStrUsingDP(str, len);
    str = "forgeeksskeegfor";
	len = str.length();
	findLongestPalindromeStrBrute(str,len);
	str = "forgeeksskeegfor";
	len = str.length();
	findLongestPalindromeStrUsingMap(str, len);
	str = "forgeeksskeegfor";
	len = str.length();
	findLongestPalindromeStrUsingOneExtraSpace(str, len);
	return 0;
}
