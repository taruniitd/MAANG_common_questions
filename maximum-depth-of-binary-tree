//https://www.geeksforgeeks.org/write-a-c-program-to-find-the-maximum-depth-or-height-of-a-tree/
#include <iostream>
#include <queue>
using namespace std;

class node
{
    public:
        int data;
        node* left;
        node* right;
        
        node(int val) : data(val)
        {
            left = nullptr;
            right = nullptr;
        }
};

int maxDepthTreeUsingRecursion(node* root)
{
    if(root == nullptr)
        return 0;
    else
    {
        int lDepth = maxDepthTreeUsingRecursion(root->left);
        int rDepth = maxDepthTreeUsingRecursion(root->right);
        
        if(lDepth > rDepth)
        {
            return (lDepth + 1);
        }
        else
        {
            return (rDepth + 1);
        }
    }
}

int maxDepthTreeUsingQueueAndNull(node* root)
{
    int depth = 0;
    queue<node*> cur_queue;
    
    cur_queue.push(root);
    cur_queue.push(nullptr);
    
    while(!cur_queue.empty())
    {
        node* temp = cur_queue.front();
        cur_queue.pop();
        
        if(temp == nullptr)
            depth++;
        if(temp != nullptr)
        {
            if(temp->left != nullptr)
                cur_queue.push(temp->left);
            if(temp->right != nullptr)
                cur_queue.push(temp->right);
        }
        else if(!cur_queue.empty())
        {
            cur_queue.push(nullptr);
        }
    }
    return depth;
}

int maxDepthTreeUsingQueueNoNull(node* root)
{
    int depth = 0;
    queue<node*> cur_queue;
    
    cur_queue.push(root);
    
    while(!cur_queue.empty())
    {
        for(int h = 0; h < cur_queue.size(); h++)
        {
            node* temp = cur_queue.front();
            cur_queue.pop();
            
            if(temp->left != nullptr)
                cur_queue.push(temp->left);
            if(temp->right != nullptr)
                cur_queue.push(temp->right);
        }
        depth++;
    }
    return depth;
}
int main()
{
    node* root = new node(1);
    root->left = new node(2);
    root->right = new node(3);
    root->left->left = new node(4);
    root->left->left->right = new node(5);
    
    cout << maxDepthTreeUsingRecursion(root) << endl;
    
    cout <<" Height using 2nd method " << endl;
    
    cout << maxDepthTreeUsingQueueAndNull(root) << endl;
    
    cout <<" Height using 3rd method " << endl;
    
    cout << maxDepthTreeUsingQueueNoNull(root) << endl;
    return 0;
}
