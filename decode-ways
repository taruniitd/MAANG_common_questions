//https://www.geeksforgeeks.org/count-possible-decodings-given-digit-sequence/
#include <cstring>
#include <iostream>
using namespace std;


int countDecoding(char* digits, int n)
{
	// base cases
	if (n == 0 || n == 1)
	{
	    //cout << " here n is 0 /1 " << endl;
		return 1;
	}
	if (digits[0] == '0')
		return 0;

	// for base condition "01123" should return 0
	// Initialize count
	int count = 0;

	// If the last digit is not 0,
	// then last digit must add
	// to the number of words
	if (digits[n - 1] > '0')
	{
	    //cout << " here n -1 > 0 " << "n = " << n << endl;
		count = countDecoding(digits, n - 1);
	}
	// If the last two digits form a number smaller
	// than or equal to 26, then consider
	// last two digits and recur
	if (digits[n - 2] == '1'
		|| (digits[n - 2] == '2'
		&& digits[n - 1] < '7'))
	{
	    //cout << " here n -2 / n -1 checked count =  " << count << " n = " << n << endl;
		count += countDecoding(digits, n - 2);
	}
	//cout << "ret count = " << count << "n = " << n << endl;
	return count;
}

// Given a digit sequence of length n,
// returns count of possible decodings by
// replacing 1 with A, 2 with B, ... 26 with Z
int countWays(char* digits, int n)
{
	if (n == 0 || (n == 1 && digits[0] == '0'))
		return 0;
	return countDecoding(digits, n);
}

int countWaysDP(char* digits, int n)
{
    int count[n + 1];
    count[0] = 1;
    count[1] = 1;
    
    if(digits[0] == '0')
        return 0;
    
    for(int i = 2; i <= n; i++)
    {
        count[i] = 0;
        
        if(digits[i - 1] > '0')
            count[i] = count[i - 1];
        
        if(digits[i - 2] == '1' || (digits[i - 2] == '2' && digits[i - 1] < '7'))
            count[i] += count[i - 2];
    }
    return count[n];
    
}

// Driver code
int main()
{
	char digits[] = "1234";
	int n = strlen(digits);
	cout << "Count is " << countWays(digits, n) << endl;
	
	cout << "Try new method :"  << endl;
	
	cout << "Count is " << countWaysDP(digits, n);
	return 0;
}

