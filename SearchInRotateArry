//https://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/
#include <iostream>
using namespace std;

int findPivot(int arr[], int low, int high)
{
    if(low > high)
        return -1;
    if(high == low)
        return low;
    
    int mid = (low + high) / 2;   
    
    if((mid < high) && arr[mid] > arr[mid + 1])
        return mid;
    if((mid > low) && arr[mid] < arr[mid - 1])
        return (mid - 1);
        
    if(arr[low] >= arr[mid])
        return findPivot(arr, low, mid - 1);
    return findPivot(arr, mid + 1, high);
}

int binarySearch(int arr[], int low, int high, int key)
{
    int mid = (low + high) / 2;
    if(key == arr[mid])
        return mid;
    if(key <= arr[mid])
        return binarySearch(arr, low, mid - 1, key);
    return binarySearch(arr, mid + 1, high, key);
}

int findInRotateSortedArrUsingPivot(int arr[], int arrLen, int key)
{
    int low = 0, high = arrLen - 1;
    int mid = (low + high) / 2;
    
    if(arr[mid] == key)
        return mid;
        
    int pivot = findPivot(arr, low, high);
    cout << "pivot = " << pivot << endl;
    if(pivot == -1)
        return binarySearch(arr, low, high, key);
    
    if(arr[pivot] == key)
        return pivot;
    
    if(arr[0] <= key)
        return binarySearch(arr, 0, pivot - 1, key);
    return binarySearch(arr, pivot + 1, high, key);
}   

int searchSingleBinarySearch(int arr[], int low, int high, int key)
{
    int mid = (low + high) / 2;
    
    if(arr[mid] == key)
        return mid;
    
    if(arr[low] <= arr[mid])
    {
        if(key >= arr[low] && key <= arr[mid])
        {
            return searchSingleBinarySearch(arr, low, mid -1 , key);
        }
        return searchSingleBinarySearch(arr, mid + 1, high, key);
    }
    if(key >= arr[mid] && key <= arr[high])
    {
        return searchSingleBinarySearch(arr, mid + 1, high, key);
    }
    
    return searchSingleBinarySearch(arr, low, mid - 1, key);
}

int findInRotateSortedArrUsingSingleBinarySearch(int arr[], int arrLen, int key)
{
    int low = 0;
    int high = arrLen - 1;
    int mid = (low + high) / 2;
    
    return searchSingleBinarySearch(arr, low, high, key);
}

int main() {
    int arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3};
    int arrLen = sizeof(arr) / sizeof(arr[0]);
    int key = 3;
    
    int algoType;
    cin >> algoType;
    switch(algoType)
    {
        case 0:
            cout << "key is at index = " << findInRotateSortedArrUsingPivot(arr, arrLen, key) << endl ;
        break;
        case 1:
            cout << "key is at index = " << findInRotateSortedArrUsingSingleBinarySearch(arr, arrLen, key) << endl;
        break;
    }
	return 0;
}
