//https://www.geeksforgeeks.org/merge-k-sorted-linked-lists/
#include <iostream>
#include <climits>
using namespace std;

typedef struct node {
    int data;
    node* next;
    node(int val)
    {
        data = val;
        next = nullptr;
    }
} node;

void printList(node* root_node)
{
    cout << " cur list nodes are : ";
    while(root_node != nullptr)
    {
        cout << root_node->data << "   " ;
        root_node = root_node->next;
    }
}

node* mergeKsortedList(node* arr[], int no_lists)
{
    for(int cur_list = 1; cur_list <= no_lists; cur_list++)
    {
        if(cur_list == 2)
            printList(arr[0]);
        while(1)
        {
            node* first_list = arr[0];
            node* second_list = arr[cur_list];
            
            if(second_list == nullptr)
                break;
            if(first_list->data >= second_list->data)
            {
                arr[cur_list] = second_list->next;
                second_list->next = first_list;
                arr[0] = second_list;
            }
            else
            {
                while(first_list->next != nullptr)
                {
                    if(first_list->next->data >= second_list->data)
                    {
                        arr[cur_list] = second_list->next;
                        second_list->next = first_list->next;
                        first_list->next = second_list;
                        break;
                    }
                    first_list = first_list->next;
                    
                    if(first_list->next == nullptr)
                    {
                        arr[cur_list] = second_list->next;
                        second_list->next = nullptr;
                        first_list->next = second_list;
                        first_list->next->next = nullptr;
                        break;
                    }
                }
            }
        }
    }
    return arr[0];
}

node* sort_merge_recursive(node* first_list, node* second_list)
{
    node* result_list = nullptr;
    
    if(first_list == nullptr)
        return second_list;
    else if(second_list == nullptr)
        return first_list;
    
    if(first_list->data <= second_list->data)
    {
        result_list = first_list;
        result_list->next = sort_merge_recursive(first_list->next, second_list);
    }
    else
    {
        result_list = second_list;
        result_list->next = sort_merge_recursive(first_list, second_list->next);
    }
    return result_list;
}

node* mergeKsortedListRecursively(node* arr[], int no_lists)
{
    while(no_lists != 0)
    {
        int i = 0, j = no_lists;
        while(i < j)
        {
            arr[i] = sort_merge_recursive(arr[i], arr[j]);
            i++;
            j--;
            
            if(i >= j)
                no_lists = j;
        }
    }
    return arr[0];
}

node* mergeKsortedListInteratively(node* arr[], int no_lists)
{
    node* result_list = nullptr;
    
    while(1)
    {
        int a = 0;
        int z;
        int min = INT_MAX;
        node* cur_list;
        for(int i = 0; i <= no_lists; i++)
        {
            if(arr[i] != nullptr)
            {
                a++;
                if(arr[i]->data < min)
                {
                    min = arr[i]->data;
                    z = i;
                }
            }
        }
        if(a != 0)
        {
            arr[z] = arr[z]->next;
            node* temp = new node(min);
            if(result_list == nullptr)
            {
                result_list = temp;
                cur_list = temp;
            }
            else
            {
                cur_list->next = temp;
                cur_list = temp;
            }
        }
        else
        {
            return result_list;
        }
    }
    
}

int main() {
	int no_lists = 3;
	int no_node_list = 4;
	
	node* arr[no_lists];
	
	arr[0] = new node(1);
	arr[0]->next = new node(3);
	arr[0]->next->next = new node(5);
	arr[0]->next->next->next = new node(7);
	
	
	arr[1] = new node(2);
	arr[1]->next = new node(4);
	arr[1]->next->next = new node(6);
	arr[1]->next->next->next = new node(8);
	
	
	arr[2] = new node(0);
	arr[2]->next = new node(4);
	arr[2]->next->next = new node(7);
	arr[2]->next->next->next = new node(10);
	
	int i;
	node* resultList;
	cin >> i;
	switch(i)
	{
	    case 0:
        	resultList = mergeKsortedList(arr, no_lists - 1);
        	printList(resultList);
        break;
        case 1:
            resultList = mergeKsortedListRecursively(arr, no_lists - 1);
        	printList(resultList);
        break;
        case 2:
            resultList = mergeKsortedListInteratively(arr, no_lists - 1);
        	printList(resultList);
        break;
	}
	return 0;
}
