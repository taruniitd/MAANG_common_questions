//https://www.geeksforgeeks.org/find-minimum-element-in-a-sorted-and-rotated-array/
#include <iostream>
using namespace std;

int findMin(int arr[], int low, int high)
{
    if(high < low)
        return arr[0];
    if(high == low)
        return arr[low];
    
    int mid = low + (high - low) / 2;
    
    if(mid < high && arr[mid + 1] < arr[mid])
        return arr[mid + 1];
    if(mid > low && arr[mid] < arr[mid - 1])
        return arr[mid];
    if(arr[high] > arr[mid])
        return findMin(arr, low, mid - 1);
    else
        return findMin(arr, mid + 1, high);
}

int findMinWithDup(int arr[], int low, int high)
{
    while(low < high)
    {
        int mid = low + (high - low) / 2;
        if(arr[mid] == arr[high])
            high--;
        else if(arr[mid] > arr[high])
            low = mid + 1;
        else
            high = mid;
    }
    return arr[high];
}

int main()
{
    int arr[] = {3,4,5,6,1,1,2};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    cout << "minimum element = " << findMin(arr, 0, n - 1);
    cout << "minimum element with dup = " << findMin(arr, 0, n - 1);
}
