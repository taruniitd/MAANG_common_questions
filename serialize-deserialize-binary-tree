//https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/
#include <iostream>

using namespace std;
#define MARKER -1

typedef struct treeNode
{
    int key;
    struct treeNode* left, *right;
} treeNode;

treeNode* newNode(int val)
{
    treeNode* temp = new treeNode();
    temp->left = temp->right = nullptr;
    temp->key = val;
    return temp;
}

void serialize(treeNode* root, FILE *fp)
{
    if(root == nullptr)
    {
        fprintf(fp, "%d", MARKER);
        return;
    }
    fprintf(fp, "%d", root->key);
    serialize(root->left, fp);
    serialize(root->right, fp);
}

void deSerialize(treeNode *&root, FILE *fp)
{
    int val;
    if( !fscanf(fp, "%d ", &val) || val == MARKER)
        return;
    root = newNode(val);
    deSerialize(root->left, fp);
    deSerialize(root->right, fp);
}

void inorder(treeNode* root)
{
    if(root)
    {
        inorder(root->left);
        cout << root->key;
        inorder(root->right);
    }
}

int main()
{
    struct treeNode* root = newNode(20);
    root->left = newNode(8);
    root->right = newNode(22);
    root->left->left = newNode(4);
    root->left->right = newNode(12);
    root->left->right->left = newNode(10);
    root->left->right->right = newNode(14);
    
    FILE *fp = fopen("tree.txt", "w");
    if(fp == nullptr)
    {
        puts("Could not open file");
        return 0;
    }
    serialize(root, fp);
    fclose(fp);
    
    treeNode* root1 = nullptr;
    fp = fopen("tree.txt", "r");
    deSerialize(root1, fp);
    inorder(root1);
    return 0;
}
