//https://www.geeksforgeeks.org/insert-in-sorted-and-non-overlapping-interval-array/
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Interval
{
    int start;
    int end;
    Interval() : start(0), end(0)
    {
        
    }
    Interval(int s, int e)
    {
        start = s;
        end = e;
    }
};

bool doesOverlap(Interval a, Interval b)
{
    return (min(a.end, b.end) >= max(a.start, b.start));
}

vector<Interval> insertNewInterval(vector<Interval>& Intervals, Interval newInterval)
{
    vector<Interval> ans;
    int n = Intervals.size();
    
    if(n == 0)
    {
        ans.push_back(newInterval);
        return ans;
    }
    
    //1st 2 cases
    if(newInterval.end < Intervals[0].start ||
        newInterval.start > Intervals[n-1].end)
    {
        if(newInterval.end < Intervals[0].start)
            ans.push_back(newInterval);
        for(int i = 0; i < n; i++)
            ans.push_back(Intervals[i]);
        if(newInterval.start > Intervals[n-1].end)
            ans.push_back(newInterval);
        
        return ans;
    }
    
    //case 3
    if(newInterval.start < Intervals[0].start &&
        newInterval.end > Intervals[n-1].end)
    {
        ans.push_back(newInterval);
        return ans;
    }

    bool overlap = true;
    for(int i = 0; i < n; i++)
    {
        overlap = doesOverlap(Intervals[i], newInterval);
        if(!overlap)
        {
            ans.push_back(Intervals[i]);
            if(i < n && newInterval.start > Intervals[i].end &&
                newInterval.end < Intervals[i+1].start)
                ans.push_back(newInterval);
            continue;
        }
        
        Interval temp;
        temp.start = min(newInterval.start, Intervals[i].start);
        while(i < n  && overlap)
        {
            temp.end = max(newInterval.end, Intervals[i].end);
            if(i == n-1)
                overlap = false;
            else
                overlap = doesOverlap(Intervals[i+1], newInterval);
            i++;
        }
        i--;
        ans.push_back(temp);
    }
    return ans;
}

int main() {
    vector<Interval> vecInterval;
	Interval newInterval0(1,2);
	vecInterval.push_back(newInterval0);
	Interval newInterval1(3,5);
	vecInterval.push_back(newInterval1);
	Interval newInterval2(6,7);
	vecInterval.push_back(newInterval2);
	Interval newInterval3(8,10);
	vecInterval.push_back(newInterval3);
	Interval newInterval4(12,16);
	vecInterval.push_back(newInterval4);
	
	Interval newInterval(4,9);
	
	vector<Interval> ans = insertNewInterval(vecInterval, newInterval);
	
	for(int i = 0; i < ans.size(); i++)
	{
	    std::cout <<  ans[i].start <<" , " << ans[i].end << std::endl;
	}
	return 0;
}
